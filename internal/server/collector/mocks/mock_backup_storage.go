// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/collector/collector.go

// Package mock_collector is a generated GoMock package.
package mock_collector

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

/*
// MockServerStorage is a mock of ServerStorage interface.
type MockServerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockServerStorageMockRecorder
}

// MockServerStorageMockRecorder is the mock recorder for MockServerStorage.
type MockServerStorageMockRecorder struct {
	mock *MockServerStorage
}


// NewMockServerStorage creates a new mock instance.
func NewMockServerStorage(ctrl *gomock.Controller) *MockServerStorage {
	mock := &MockServerStorage{ctrl: ctrl}
	mock.recorder = &MockServerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerStorage) EXPECT() *MockServerStorageMockRecorder {
	return m.recorder
}

// DatabasePing mocks base method.
func (m *MockServerStorage) DatabasePing(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabasePing", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DatabasePing indicates an expected call of DatabasePing.
func (mr *MockServerStorageMockRecorder) DatabasePing(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabasePing", reflect.TypeOf((*MockServerStorage)(nil).DatabasePing), ctx)
}

// GetAll mocks base method.
func (m *MockServerStorage) GetAll(ctx context.Context) (map[string]float64, map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(map[string]int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockServerStorageMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockServerStorage)(nil).GetAll), ctx)
}

// GetCounter mocks base method.
func (m *MockServerStorage) GetCounter(ctx context.Context, name string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", ctx, name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockServerStorageMockRecorder) GetCounter(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockServerStorage)(nil).GetCounter), ctx, name)
}

// GetDump mocks base method.
func (m *MockServerStorage) GetDump(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDump", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDump indicates an expected call of GetDump.
func (mr *MockServerStorageMockRecorder) GetDump(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDump", reflect.TypeOf((*MockServerStorage)(nil).GetDump), ctx)
}

// GetGauge mocks base method.
func (m *MockServerStorage) GetGauge(ctx context.Context, name string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", ctx, name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockServerStorageMockRecorder) GetGauge(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockServerStorage)(nil).GetGauge), ctx, name)
}

// RestoreFromDump mocks base method.
func (m *MockServerStorage) RestoreFromDump(ctx context.Context, dump string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreFromDump", ctx, dump)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreFromDump indicates an expected call of RestoreFromDump.
func (mr *MockServerStorageMockRecorder) RestoreFromDump(ctx, dump interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFromDump", reflect.TypeOf((*MockServerStorage)(nil).RestoreFromDump), ctx, dump)
}

// SetBatch mocks base method.
func (m *MockServerStorage) SetBatch(ctx context.Context, batch []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBatch", ctx, batch)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBatch indicates an expected call of SetBatch.
func (mr *MockServerStorageMockRecorder) SetBatch(ctx, batch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBatch", reflect.TypeOf((*MockServerStorage)(nil).SetBatch), ctx, batch)
}

// SetCounter mocks base method.
func (m *MockServerStorage) SetCounter(ctx context.Context, name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCounter", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCounter indicates an expected call of SetCounter.
func (mr *MockServerStorageMockRecorder) SetCounter(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCounter", reflect.TypeOf((*MockServerStorage)(nil).SetCounter), ctx, name, value)
}

// SetGauge mocks base method.
func (m *MockServerStorage) SetGauge(ctx context.Context, name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockServerStorageMockRecorder) SetGauge(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockServerStorage)(nil).SetGauge), ctx, name, value)
}

*/

// MockBackupStorage is a mock of BackupStorage interface.
type MockBackupStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBackupStorageMockRecorder
}

// MockBackupStorageMockRecorder is the mock recorder for MockBackupStorage.
type MockBackupStorageMockRecorder struct {
	mock *MockBackupStorage
}

// NewMockBackupStorage creates a new mock instance.
func NewMockBackupStorage(ctrl *gomock.Controller) *MockBackupStorage {
	mock := &MockBackupStorage{ctrl: ctrl}
	mock.recorder = &MockBackupStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackupStorage) EXPECT() *MockBackupStorageMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockBackupStorage) Load() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockBackupStorageMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockBackupStorage)(nil).Load))
}

// Save mocks base method.
func (m *MockBackupStorage) Save(dump string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", dump)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockBackupStorageMockRecorder) Save(dump interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBackupStorage)(nil).Save), dump)
}
