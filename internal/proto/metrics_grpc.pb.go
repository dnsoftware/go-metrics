// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: internal/proto/metrics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Metrics_GetMetricValue_FullMethodName      = "/proto.Metrics/GetMetricValue"
	Metrics_UpdateMetric_FullMethodName        = "/proto.Metrics/UpdateMetric"
	Metrics_GetMetricExt_FullMethodName        = "/proto.Metrics/GetMetricExt"
	Metrics_UpdateMetricExt_FullMethodName     = "/proto.Metrics/UpdateMetricExt"
	Metrics_GetAllMetrics_FullMethodName       = "/proto.Metrics/GetAllMetrics"
	Metrics_UpdateMetricsBatch_FullMethodName  = "/proto.Metrics/UpdateMetricsBatch"
	Metrics_UpdateMetricsStream_FullMethodName = "/proto.Metrics/UpdateMetricsStream"
)

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsClient interface {
	GetMetricValue(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error)
	UpdateMetric(ctx context.Context, in *UpdateMetricRequest, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
	GetMetricExt(ctx context.Context, in *GetMetricExtRequest, opts ...grpc.CallOption) (*GetMetricExtResponse, error)
	UpdateMetricExt(ctx context.Context, in *UpdateMetricExtRequest, opts ...grpc.CallOption) (*UpdateMetricExtResponse, error)
	GetAllMetrics(ctx context.Context, in *GetAllMetricsRequest, opts ...grpc.CallOption) (*GetAllMetricsResponse, error)
	UpdateMetricsBatch(ctx context.Context, in *UpdateMetricBatchRequest, opts ...grpc.CallOption) (*UpdateMetricBatchResponse, error)
	UpdateMetricsStream(ctx context.Context, opts ...grpc.CallOption) (Metrics_UpdateMetricsStreamClient, error)
}

type metricsClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsClient(cc grpc.ClientConnInterface) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) GetMetricValue(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error) {
	out := new(GetMetricResponse)
	err := c.cc.Invoke(ctx, Metrics_GetMetricValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) UpdateMetric(ctx context.Context, in *UpdateMetricRequest, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, Metrics_UpdateMetric_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) GetMetricExt(ctx context.Context, in *GetMetricExtRequest, opts ...grpc.CallOption) (*GetMetricExtResponse, error) {
	out := new(GetMetricExtResponse)
	err := c.cc.Invoke(ctx, Metrics_GetMetricExt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) UpdateMetricExt(ctx context.Context, in *UpdateMetricExtRequest, opts ...grpc.CallOption) (*UpdateMetricExtResponse, error) {
	out := new(UpdateMetricExtResponse)
	err := c.cc.Invoke(ctx, Metrics_UpdateMetricExt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) GetAllMetrics(ctx context.Context, in *GetAllMetricsRequest, opts ...grpc.CallOption) (*GetAllMetricsResponse, error) {
	out := new(GetAllMetricsResponse)
	err := c.cc.Invoke(ctx, Metrics_GetAllMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) UpdateMetricsBatch(ctx context.Context, in *UpdateMetricBatchRequest, opts ...grpc.CallOption) (*UpdateMetricBatchResponse, error) {
	out := new(UpdateMetricBatchResponse)
	err := c.cc.Invoke(ctx, Metrics_UpdateMetricsBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) UpdateMetricsStream(ctx context.Context, opts ...grpc.CallOption) (Metrics_UpdateMetricsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metrics_ServiceDesc.Streams[0], Metrics_UpdateMetricsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsUpdateMetricsStreamClient{stream}
	return x, nil
}

type Metrics_UpdateMetricsStreamClient interface {
	Send(*UpdateMetricExtRequest) error
	Recv() (*UpdateMetricExtResponse, error)
	grpc.ClientStream
}

type metricsUpdateMetricsStreamClient struct {
	grpc.ClientStream
}

func (x *metricsUpdateMetricsStreamClient) Send(m *UpdateMetricExtRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricsUpdateMetricsStreamClient) Recv() (*UpdateMetricExtResponse, error) {
	m := new(UpdateMetricExtResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricsServer is the server API for Metrics service.
// All implementations must embed UnimplementedMetricsServer
// for forward compatibility
type MetricsServer interface {
	GetMetricValue(context.Context, *GetMetricRequest) (*GetMetricResponse, error)
	UpdateMetric(context.Context, *UpdateMetricRequest) (*UpdateMetricResponse, error)
	GetMetricExt(context.Context, *GetMetricExtRequest) (*GetMetricExtResponse, error)
	UpdateMetricExt(context.Context, *UpdateMetricExtRequest) (*UpdateMetricExtResponse, error)
	GetAllMetrics(context.Context, *GetAllMetricsRequest) (*GetAllMetricsResponse, error)
	UpdateMetricsBatch(context.Context, *UpdateMetricBatchRequest) (*UpdateMetricBatchResponse, error)
	UpdateMetricsStream(Metrics_UpdateMetricsStreamServer) error
	mustEmbedUnimplementedMetricsServer()
}

// UnimplementedMetricsServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsServer struct {
}

func (UnimplementedMetricsServer) GetMetricValue(context.Context, *GetMetricRequest) (*GetMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricValue not implemented")
}
func (UnimplementedMetricsServer) UpdateMetric(context.Context, *UpdateMetricRequest) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetric not implemented")
}
func (UnimplementedMetricsServer) GetMetricExt(context.Context, *GetMetricExtRequest) (*GetMetricExtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricExt not implemented")
}
func (UnimplementedMetricsServer) UpdateMetricExt(context.Context, *UpdateMetricExtRequest) (*UpdateMetricExtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricExt not implemented")
}
func (UnimplementedMetricsServer) GetAllMetrics(context.Context, *GetAllMetricsRequest) (*GetAllMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMetrics not implemented")
}
func (UnimplementedMetricsServer) UpdateMetricsBatch(context.Context, *UpdateMetricBatchRequest) (*UpdateMetricBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricsBatch not implemented")
}
func (UnimplementedMetricsServer) UpdateMetricsStream(Metrics_UpdateMetricsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateMetricsStream not implemented")
}
func (UnimplementedMetricsServer) mustEmbedUnimplementedMetricsServer() {}

// UnsafeMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServer will
// result in compilation errors.
type UnsafeMetricsServer interface {
	mustEmbedUnimplementedMetricsServer()
}

func RegisterMetricsServer(s grpc.ServiceRegistrar, srv MetricsServer) {
	s.RegisterService(&Metrics_ServiceDesc, srv)
}

func _Metrics_GetMetricValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).GetMetricValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_GetMetricValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).GetMetricValue(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_UpdateMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).UpdateMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_UpdateMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).UpdateMetric(ctx, req.(*UpdateMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_GetMetricExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricExtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).GetMetricExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_GetMetricExt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).GetMetricExt(ctx, req.(*GetMetricExtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_UpdateMetricExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricExtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).UpdateMetricExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_UpdateMetricExt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).UpdateMetricExt(ctx, req.(*UpdateMetricExtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_GetAllMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).GetAllMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_GetAllMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).GetAllMetrics(ctx, req.(*GetAllMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_UpdateMetricsBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).UpdateMetricsBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_UpdateMetricsBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).UpdateMetricsBatch(ctx, req.(*UpdateMetricBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_UpdateMetricsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricsServer).UpdateMetricsStream(&metricsUpdateMetricsStreamServer{stream})
}

type Metrics_UpdateMetricsStreamServer interface {
	Send(*UpdateMetricExtResponse) error
	Recv() (*UpdateMetricExtRequest, error)
	grpc.ServerStream
}

type metricsUpdateMetricsStreamServer struct {
	grpc.ServerStream
}

func (x *metricsUpdateMetricsStreamServer) Send(m *UpdateMetricExtResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricsUpdateMetricsStreamServer) Recv() (*UpdateMetricExtRequest, error) {
	m := new(UpdateMetricExtRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Metrics_ServiceDesc is the grpc.ServiceDesc for Metrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetricValue",
			Handler:    _Metrics_GetMetricValue_Handler,
		},
		{
			MethodName: "UpdateMetric",
			Handler:    _Metrics_UpdateMetric_Handler,
		},
		{
			MethodName: "GetMetricExt",
			Handler:    _Metrics_GetMetricExt_Handler,
		},
		{
			MethodName: "UpdateMetricExt",
			Handler:    _Metrics_UpdateMetricExt_Handler,
		},
		{
			MethodName: "GetAllMetrics",
			Handler:    _Metrics_GetAllMetrics_Handler,
		},
		{
			MethodName: "UpdateMetricsBatch",
			Handler:    _Metrics_UpdateMetricsBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateMetricsStream",
			Handler:       _Metrics_UpdateMetricsStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/metrics.proto",
}
